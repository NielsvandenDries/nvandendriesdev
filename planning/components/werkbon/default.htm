{% set Werkbonnen = __SELF__.bon %}

{% for bon in Werkbonnen %}
    
        <h1>{{ bon.werkbonnaam }} - {{ bon.park }}</h1>
        <hr>
        <form data-request="onSend">
            <!-- Klant fields -->
            <div class="form-floating mb-3">
              <input class="form-control" type="text" id="floatingEngineerNaam" name="EngineerNaam">
              <label for="floatingEngineerNaam" class="form-label">Naam Engineer:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="text" id="floatingOwnerNaam" name="OwnerNaam">
              <label for="floatingOwnerNaam" class="form-label">Naam Eigenaar:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="text" id="floatingadres" name="adres">
              <label for="floatingadres" class="form-label">Adres kavel:</label>
            </div>
            <hr>
            <!-- Item Fields -->
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingPOF" name="POF">
              <label for="floatingPOF" class="form-label">Onderband Filter/splitter POF:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingKabel" name="Kabel">
              <label for="floatingKabel" class="form-label">Kabelkeur Coaxkabel per meter:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingverloop" name="verloop">
              <label for="floatingverloop" class="form-label">Verloopstekker male/female recht:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingfconnectorkoppel" name="fconnectorkoppel">
              <label for="floatingfconnectorkoppel" class="form-label">F-Connector koppelstuk - Female:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingverloophaaks" name="verloophaaks">
              <label for="floatingverloophaaks" class="form-label">Verloopstekker male/female recht haaks:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingWCD" name="WCD">
              <label for="floatingWCD" class="form-label">Aansluitdoos WCD:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingOpbouwraamWCD" name="OpbouwraamWCD">
              <label for="floatingOpbouwraamWCD" class="form-label">Aansluitdoos WCD Opbouwraam:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingversterker" name="versterker">
              <label for="floatingversterker" class="form-label">Signaal versterker:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingCoaxMale" name="CoaxMale">
              <label for="floatingCoaxMale" class="form-label">Stekker Coax Male:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingCoaxFemale" name="CoaxFemale">
              <label for="floatingCoaxFemale" class="form-label">Stekker Coax Female:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingFconnector" name="Fconnector">
              <label for="floatingFconnector" class="form-label">F-Connector:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floating3mfconkabel" name="3mfconkabel">
              <label for="floating3mfconkabel" class="form-label">Standaard Modem aansluitkabel 3 meter F-connector:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floating3mTVkabelIEC" name="3mTVkabelIEC">
              <label for="floating3mTVkabelIEC" class="form-label">Standaard TV aansluitkabel 3 meter IEC:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floating5mTVkabel4G" name="5mTVkabel4G">
              <label for="floating5mTVkabel4G" class="form-label">TV aansluitkabel 5 meter 4G proof:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingverstkabel" name="verstkabel">
              <label for="floatingverstkabel" class="form-label">aansluitkabel voor antenne versterker:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingModem" name="Modem">
              <label for="floatingModem" class="form-label">Vervangend Modem:</label>
            </div>
            <div class="form-floating mb-3">
              <input class="form-control" type="number" id="floatingarbeid" name="arbeid">
              <label for="floatingarbeid" class="form-label">Arbeid per half uur:</label>
            </div>
            <div class="form-floating mb-3">
              <textarea class="form-control" type="text" id="floatingOverigMateriaal" name="OverigMateriaal"></textarea>
              <label for="floatingOverigMateriaal" class="form-label">Overig Materiaal (Naam en aantal):</label>
            </div>
            <hr>
            <!-- Signature -->
            <div class="mb-3">
              <label for="sig-canvas" class="form-label">Handtekening:</label><br>
              <canvas id="sig-canvas" width="620" height="160" style="border: 1px solid;">
                  Browser niet ondersteund.
              </canvas>
            </div>
             <div class="form-floating mb-3">
               <button class="btn btn-primary" type="submit" id="sig-submitBtn">Verzenden</button>
               <button class="btn btn-secondary" id="sig-clearBtn">Reset</button>
             </div>
            <div class="form-floating mb-3">
              <textarea name="code" id="sig-dataUrl" class="form-control" type="text" disabled></textarea>
              <img id="sig-image" src="" alt="Your signature will go here!" hidden>
            </div>
          </form>
      
{% endfor %}
<script>
  (function() {
    window.requestAnimFrame = (function(callback) {
      return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimaitonFrame ||
        function(callback) {
          window.setTimeout(callback, 1000 / 60);
        };
    })();
  
    var canvas = document.getElementById("sig-canvas");
    var ctx = canvas.getContext("2d");
    ctx.strokeStyle = "#222222";
    ctx.lineWidth = 4;
  
    var drawing = false;
    var mousePos = {
      x: 0,
      y: 0
    };
    var lastPos = mousePos;
  
    canvas.addEventListener("mousedown", function(e) {
      drawing = true;
      lastPos = getMousePos(canvas, e);
      var dataUrl = canvas.toDataURL();
      sigText.innerHTML = dataUrl;
      sigImage.setAttribute("src", dataUrl);
    }, false);
  
    canvas.addEventListener("mouseup", function(e) {
      drawing = false;
      var dataUrl = canvas.toDataURL();
      sigText.innerHTML = dataUrl;
      sigImage.setAttribute("src", dataUrl);
    }, false);
  
    canvas.addEventListener("mousemove", function(e) {
      mousePos = getMousePos(canvas, e);
    }, false);
  
    // Add touch event support for mobile
    canvas.addEventListener("touchstart", function(e) {
  
    }, false);
  
    canvas.addEventListener("touchmove", function(e) {
      var touch = e.touches[0];
      var me = new MouseEvent("mousemove", {
        clientX: touch.clientX,
        clientY: touch.clientY
      });
      canvas.dispatchEvent(me);
    }, false);
  
    canvas.addEventListener("touchstart", function(e) {
      mousePos = getTouchPos(canvas, e);
      var touch = e.touches[0];
      var me = new MouseEvent("mousedown", {
        clientX: touch.clientX,
        clientY: touch.clientY
      });
      canvas.dispatchEvent(me);
    }, false);
  
    canvas.addEventListener("touchend", function(e) 
      {
          var me = new MouseEvent("mouseup", {});
          canvas.dispatchEvent(me);
          sigText.innerHTML = dataUrl;
          sigImage.setAttribute("src", dataUrl);
      }, false);
      
  
    function getMousePos(canvasDom, mouseEvent) {
      var rect = canvasDom.getBoundingClientRect();
      return {
        x: mouseEvent.clientX - rect.left,
        y: mouseEvent.clientY - rect.top
      }
    }
  
    function getTouchPos(canvasDom, touchEvent) {
      var rect = canvasDom.getBoundingClientRect();
      return {
        x: touchEvent.touches[0].clientX - rect.left,
        y: touchEvent.touches[0].clientY - rect.top
      }
    }
  
    function renderCanvas() {
      if (drawing) {
        ctx.moveTo(lastPos.x, lastPos.y);
        ctx.lineTo(mousePos.x, mousePos.y);
        ctx.stroke();
        lastPos = mousePos;
      }
    }
  
    // Prevent scrolling when touching the canvas
    document.body.addEventListener("touchstart", function(e) {
      if (e.target == canvas) {
        e.preventDefault();
      }
    }, false);
    document.body.addEventListener("touchend", function(e) {
      if (e.target == canvas) {
        e.preventDefault();
      }
    }, false);
    document.body.addEventListener("touchmove", function(e) {
      if (e.target == canvas) {
        e.preventDefault();
      }
    }, false);
  
    (function drawLoop() {
      requestAnimFrame(drawLoop);
      renderCanvas();
    })();
  
    function clearCanvas() {
      canvas.width = canvas.width;
    }
  
    // Set up the UI
    var sigText = document.getElementById("sig-dataUrl");
    var sigImage = document.getElementById("sig-image");
    // var clearBtn = document.getElementById("sig-clearBtn");
    // var submitBtn = document.getElementById("sig-submitBtn");
    // clearBtn.addEventListener("click", function(e) {
    //   clearCanvas();
    //   sigText.innerHTML = "Data URL for your signature will go here!";
    //   sigImage.setAttribute("src", "");
    // }, false);
    // submitBtn.addEventListener("click", function(e) {
    //   var dataUrl = canvas.toDataURL();
    //   sigText.innerHTML = dataUrl;
    //   sigImage.setAttribute("src", dataUrl);
    // }, false);
  
  })();
  </script>